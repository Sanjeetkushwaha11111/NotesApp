package com.sanjeet.androidassignment.ui.characterlistimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.sanjeet.androidassignment.api.UseCaseResultimport com.sanjeet.androidassignment.data.characterModel.Characterimport com.sanjeet.androidassignment.data.repository.CharacterRepositoryimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport timber.log.Timberclass CharacterViewModel(private val repository: CharacterRepository) : ViewModel() {    private val _characterLiveData = MutableLiveData<List<Character>>()    val characterLiveData: LiveData<List<Character>> = _characterLiveData    fun fetchCharacterList() {        viewModelScope.launch(Dispatchers.IO) {            when (val response = repository.getAllCharacters()) {                is UseCaseResult.Success -> {                    _characterLiveData.postValue(response.data.results!!)                    fetchEpisodeNames(response.data.results)                    getBookMarkedCharacterById(response.data.results)                }                is UseCaseResult.Exception -> {                    Timber.e(">>>>>>>> getCharacterList api exception ${response.exception}")                }            }        }    }    private suspend fun fetchEpisodeNames(characters: List<Character>) {        viewModelScope.launch(Dispatchers.IO) {            characters.forEach { characterWithEpisode ->                val episode = repository.fetchEpisodeForCharacter(characterWithEpisode.episode[0])                when (episode) {                    is UseCaseResult.Success -> {                        characterWithEpisode.episodeName = episode.data.name                    }                    is UseCaseResult.Exception -> {                        Timber.e(">>>>>>>> fetchEpisodeNames api exception ${episode.exception}")                    }                }            }            _characterLiveData.postValue(characters)        }    }    private suspend fun getBookMarkedCharacterById(characters: List<Character>) {        viewModelScope.launch(Dispatchers.IO) {            characters.forEach { character ->                character.isBookMarked = repository.getBookMarkedCharacterById(character.id)            }            _characterLiveData.postValue(characters)        }    }    suspend fun getAllBookMarkedChar(): List<Character> {        return repository.getAllBookMarkedCharacter()    }    fun toggleBookmarkForCharacter(character: Character, isBookMarked: Boolean) {        viewModelScope.launch(Dispatchers.IO) {            if (isBookMarked) {                repository.addBookMarkedCharacter(character)            } else {                repository.removeBookMarkedCharacter(character)            }        }    }}