package com.sanjeet.androidassignment.ui.characterlistimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptionsimport com.sanjeet.androidassignment.Rimport com.sanjeet.androidassignment.data.characterModel.CharacterListimport com.sanjeet.androidassignment.databinding.CharacterListItemBindingclass CharacterListAdapter(    characterLists: List<CharacterList>,    private val onStarClick: (CharacterList, Boolean) -> Unit) :    RecyclerView.Adapter<CharacterListViewHolder>() {    private var charList = characterLists    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CharacterListViewHolder {        return CharacterListViewHolder(            CharacterListItemBinding.inflate(                LayoutInflater.from(parent.context),                parent,                false            ), onStarClick        )    }    override fun getItemCount(): Int = charList.size    override fun onBindViewHolder(holder: CharacterListViewHolder, position: Int) {        holder.bindItems(charList[position])    }    override fun onBindViewHolder(        holder: CharacterListViewHolder,        position: Int,        payloads: MutableList<Any>    ) {        if (payloads.isEmpty()) {            holder.bindItems(charList[position])        } else {            val payload = payloads[0] as Bundle            holder.bindPartialItems(charList[position], payload)        }    }    fun updateAdapter(characterLists: List<CharacterList>) {        val diffCallback = CharacterDiffCallback(this.charList, characterLists)        val diffResult = DiffUtil.calculateDiff(diffCallback)        this.charList = characterLists        diffResult.dispatchUpdatesTo(this)    }    class CharacterDiffCallback(        private val oldList: List<CharacterList>,        private val newList: List<CharacterList>    ) : DiffUtil.Callback() {        override fun getOldListSize(): Int = oldList.size        override fun getNewListSize(): Int = newList.size        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {            // Compare items by their unique id            return oldList[oldItemPosition].id == newList[newItemPosition].id        }        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {            // Compare the content of items, you can customize the checks here            return oldList[oldItemPosition] == newList[newItemPosition]        }        override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any? {            val oldItem = oldList[oldItemPosition]            val newItem = newList[newItemPosition]            val diffBundle = Bundle()            if (oldItem.isBookMarked != newItem.isBookMarked) {                diffBundle.putBoolean("KEY_BOOKMARK", newItem.isBookMarked)            }            return if (diffBundle.size() == 0) null else diffBundle        }    }}class CharacterListViewHolder(    private var binding: CharacterListItemBinding,    private var starClick: (CharacterList, Boolean) -> Unit) : RecyclerView.ViewHolder(binding.root) {    fun bindItems(list: CharacterList) {        Glide.with(binding.image.context).load(list.image)            .transition(DrawableTransitionOptions.withCrossFade()).into(binding.image)        // Safely handle nullable fields with ?: to provide a fallback value        binding.name.text = list.name ?: "Unknown Name"        binding.allDetails.text = "${list.gender ?: "Unknown Gender"} . ${list.species ?: "Unknown Species"} . ${list.location?.name ?: "Unknown Location"}"        binding.episodeName.text = if (list.episodeName.isNullOrEmpty()) "..." else list.episodeName        updateBookmarkIcon(list.isBookMarked)        binding.bookmark.setOnClickListener {            val newBookmarkStatus = !list.isBookMarked            updateBookmarkIcon(newBookmarkStatus)            starClick(list, newBookmarkStatus)        }    }    // Update only the changed fields based on the payload    fun bindPartialItems(list: CharacterList, payload: Bundle) {        if (payload.containsKey("KEY_BOOKMARK")) {            updateBookmarkIcon(payload.getBoolean("KEY_BOOKMARK"))        }    }    private fun updateBookmarkIcon(isBookMarked: Boolean) {        if (isBookMarked) {            binding.bookmark.setImageResource(R.drawable.filled_star)        } else {            binding.bookmark.setImageResource(R.drawable.unfilled_star)        }    }}