package com.sanjeet.androidassignment.data.repositoryimport com.sanjeet.androidassignment.api.ApiInterfaceimport com.sanjeet.androidassignment.api.UseCaseResultimport com.sanjeet.androidassignment.data.characterModel.ApiResultimport com.sanjeet.androidassignment.data.characterModel.CharacterListimport com.sanjeet.androidassignment.data.characterModel.Episodeimport com.sanjeet.androidassignment.data.db.BookMarDaoclass CharacterRepository(    private val apiInterface: ApiInterface,    private val bookMarDao: BookMarDao) {    suspend fun getAllCharacters(): UseCaseResult<ApiResult> {        try {            val result = apiInterface.getCharacterList().await()            return UseCaseResult.Success(result)        } catch (e: Exception) {            return UseCaseResult.Exception(e)        }    }    suspend fun fetchEpisodeForCharacter(episodeUrl: String): UseCaseResult<Episode> {        try {            val result = apiInterface.getEpisode(episodeUrl).await()            return UseCaseResult.Success(result)        } catch (e: Exception) {            return UseCaseResult.Exception(e)        }    }    suspend fun bookMarkCharacter(character: CharacterList, isBookMarked: Boolean) {        if (isBookMarked) {            bookMarDao.addBookMarkedCharacter(character)        } else {            bookMarDao.removeBookMarkedCharacter(character)        }    }    suspend fun getBookMarkedCharacterById(id: Int): Boolean {        val result = bookMarDao.isCharacterBookmarked(id)        return result    }}