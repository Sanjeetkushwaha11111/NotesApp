package com.sanjeet.androidassignment.practice.desingpattern.creationalFactoryfun main() {    // calling builder class    val home =        Home.Builder().addRoom(4).addFloor(2).addLocation("Gurgaon").addBudget(1000000).build()    println(home)}//  BUILDER PATTERN: It facilitates creation of objects while allowing for optional modification  on singe objects//  In essence, the Builder pattern organizes complex object creation in a structured way, making it easier to manage and read.//  The Builder pattern is a creation design pattern that helps construct complex objects by separating their construction from their representation.class Home private constructor(    private val room: Int,    private val floor: Int,    private val location: String?,    private val budget: Long,) {    init {        println("init home")    }    data class Builder(        private var room: Int = 1,        private var floor: Int = 1,        private var location: String? = null,        private var budget: Long = 100000,    ) {        fun addRoom(value: Int) = apply { room = value }        fun addFloor(value: Int) = apply { floor = value }        fun addLocation(value: String) = apply { location = value }        fun addBudget(value: Long) = apply { budget = value }        fun build() = Home(room, floor, location, budget)    }    override fun toString() = "Home(room=$room, floor=$floor, location=$location, budget=$budget)"}