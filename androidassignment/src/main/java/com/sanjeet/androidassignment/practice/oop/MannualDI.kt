package com.sanjeet.androidassignment.practice.oopfun main() {    // Manually creating dependencies (Engine and Wheel) and injecting them into Car    val startCar = StartCar()    startCar.startCar()}class StartCar{    fun startCar() {        val car = Car(Engine(), Wheel())        car.getCar()    }}class Car(private val engine: Engine, private val wheel: Wheel) {    // This method initializes and starts the car's essential components    fun getCar() {        engine.getEngine()        wheel.getWheel()        println("Car is running...")    }}class Engine {    // Starts the engine of the car    fun getEngine() {        println("Engine Started")    }}class Wheel {    // Starts the wheels of the car    fun getWheel() {        println("Wheel Started")    }}/*    Note: Here, we are using **manual dependency injection**.    Instead of creating `Engine` and `Wheel` instances inside the `Car` class,    we inject them into `Car` via its constructor. This is useful for decoupling    components and makes it easier to test and maintain the code, as `Car` doesnâ€™t    depend on specific implementations of `Engine` and `Wheel`.    In larger projects, you may want to use a dependency injection framework    (like Dagger or Hilt) for automatic dependency management, reducing the    boilerplate and enhancing scalability.*/