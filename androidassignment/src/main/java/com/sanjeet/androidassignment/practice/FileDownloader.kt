package com.sanjeet.androidassignment.practiceimport kotlinx.coroutines.DelicateCoroutinesApiimport kotlinx.coroutines.delayimport kotlinx.coroutines.runBlockingval listener = object : DownloaderListener {    override fun downloadStared(fileName: String) {        println("$fileName started downloading")    }    override fun downloadProgress(percentage: Int) {        println("$percentage% downloaded")    }    override fun downloadCompleted(fileName: String) {        println("$fileName downloaded")    }}private val fileDownloader by lazy {    FileDownloader(listener)}fun main() = runBlocking {    fileDownloader.downloadFile("Song.mp3")}interface DownloaderListener {    fun downloadStared(fileName: String)    fun downloadProgress(percentage: Int)    fun downloadCompleted(fileName: String)}class FileDownloader(listener: DownloaderListener) {    private var downloadListener = listener    suspend fun downloadFile(fileName: String) {        downloadListener.downloadStared(fileName)        for (i in 1..10) {            delay(500)            downloadListener.downloadProgress(i * 10)        }        downloadListener.downloadCompleted(fileName)    }}