package com.sanjeet.androidassignment.practice/*A Kotlin Singleton ensures only one instance of a class exists.It also provides a global point of access,ensuring simplicity and preventing the creation of multiple instances.*/fun main() {    val singletonClass = SingletonExplicitlyDefined    singletonClass.getInstance()}class SingletonOne private constructor() {    init {        println("Instance is created")    }    companion object {        val instance = SingletonOne()    }}/*The 'Object' keyword holds a paramount position when it comes to the Kotlin Singleton class.Hold your breath as this may come as a surprise! In Kotlin, Singleton isn't explicitly defined.It's implicitly declared as an 'Object'. Yes, you read that correctly!The 'Object' keyword in Kotlin is in itself a Singleton. */// In this Kotlin Singleton class example, MySingleton is an object, and show() is its method.// Hence, the Kotlin singleton object,// MySingleton, can be accessed globally and comes with a defined lifecycle.object SingletonInKotlin {    init {        println("Instance is created for kotlin Singleton Class to declare")    }}//A Kotlin Singleton class with a private constructor prevents instantiation// from other classes, thereby enforcing the Singleton property.class SingletonExplicitlyDefined private constructor() {    init {        println("Instance is created for kotlin Singleton Explicitly Defined")    }    companion object {        private var INSTANCE: SingletonExplicitlyDefined? = null        fun getInstance(): SingletonExplicitlyDefined {            if (INSTANCE == null) {                INSTANCE = SingletonExplicitlyDefined()            }            return INSTANCE!!        }    }}